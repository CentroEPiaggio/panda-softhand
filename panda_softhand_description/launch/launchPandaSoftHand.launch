<?xml version="1.0"?>
<!-- THIS FILE LAUNCHES THE FRANKA EMIKA PANDA + SOFTHAND: BOTH THE PACKAGES ARE NEEDED -->
<launch>
    <!-- LAUNCH ARGUMENTS -->
    
    <arg name="robot_1_qb_end_effector" default="qbhand"
        doc="The qbrobotics device type connected to robot 2" /> <!-- [qbhand | qbhand2m |
    qbsoftclaw]-->
    <arg name="qbhand_device_id" value="1" doc="The ID of qbrobotics hand" />
    <arg name="model"
        default="$(find panda_softhand_description)/robot/urdf/panda_softhand.urdf.xacro" />

    <!-- Panda params -->
    <arg name="panda_arm_enabled" default="true" />
    <arg name="robot_ip" default="172.16.0.103" />
    <arg name="load_gripper" default="false" />
    <arg name="arm_id" default="panda" />

    <!-- Hand params -->
    <arg name="right_hand_enabled" default="true" />

    <!-- Utilities -->
    <arg name="environment_name" default="panda_darko" />
    <arg name="use_moveit" default="true" />

    <!-- MoveIt! params -->
    <arg name="pipeline" default="ompl" />

    <!-- START LAUNCH -->

    <!-- Robot description -->
    <param name="robot_description"
        command="$(find xacro)/xacro --inorder $(arg model)" />
    <!-- Joint state and robot state publishers of the full robot description -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <!-- FOR USING JOINT STATE PUBLISER FOR GETTING FINGER JOINT STATES -->
        <rosparam param="source_list">[/joint_states_desired]</rosparam>
        <!-- FOR USING FINGER FK PACKAGE FOR GETTING FINGER JOINT STATES -->
        <!-- <rosparam
        param="source_list">[/panda_arm/joint_states,/all_hand_joint_states]</rosparam> -->
        <param name="rate" value="30" />
    </node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

    <!-- Panda namespace -->
    <group ns="panda_arm">

        <!-- A copy of robot description -->
        <param name="robot_description"
            command="$(find xacro)/xacro --inorder $(arg model)" />
        <!-- Panda hardware interface -->
        <group if="$(arg panda_arm_enabled)">
            <node name="franka_control" pkg="franka_control" type="franka_control_node"
                output="screen" required="true">
                <rosparam command="load"
                    file="$(find franka_control)/config/franka_control_node.yaml" subst_value="true" />
                <param name="robot_ip" value="$(arg robot_ip)" />
            </node>
        </group>

        <!-- Franka custom controllers -->
        <rosparam command="load" file="$(find franka_control)/config/default_controllers.yaml"
            subst_value="true" />

        <!-- Panda controllers config -->
        <rosparam command="load"
            file="$(find panda_controllers)/config/panda_controllers_default.yaml" />

        <node name="state_controller_spawner" pkg="controller_manager" type="spawner"
            respawn="false" output="screen" args="franka_state_controller" />
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
            output="screen" args="position_joint_trajectory_controller" />
        <node name="controller_load_ct" pkg="controller_manager" type="controller_manager"
            respawn="false" output="screen" args="load computed_torque_controller" />

        <!-- Panda joint state publisher -->
        <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher"
            output="screen">
            <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states,
                franka_gripper/joint_states] </rosparam>
            <rosparam unless="$(arg load_gripper)" param="source_list">
                [franka_state_controller/joint_states] </rosparam>
            <param name="rate" value="30" />
        </node>
        <!-- Panda desired state publisher -->
        <node name="joint_state_desired_publisher" type="joint_state_publisher"
            pkg="joint_state_publisher" output="screen">
            <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states_desired,
                franka_gripper/joint_states] </rosparam>
            <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states_desired,
                /right_hand/qbhand1/joint_states] </rosparam>
            <param name="rate" value="30" />
            <remap from="/panda_arm/joint_states" to="/joint_states_desired" />
        </node>
    </group>

    <!-- Hand namespace -->
    <group ns="right_hand">
       
        <group if="$(arg right_hand_enabled)">  
        <!-- A copy of robot description -->
            <!-- A copy of robot description  -->
           <!-- <param name="robot_description" command="$(find xacro)/xacro (punt-)inorder '$(find panda_softhand_description)/robot/panda_softhand.urdf.xacro'" unless="$(arg load_gripper)" /> -->
           <include file="$(find qb_hand_control)/launch/control_qbhand.launch">
              <arg name="activate_on_initialization" value="true"/>
              <arg name="standalone" value="true"/>
              <arg name="use_controller_gui" value="true"/>
           </include>      
        </group>

    </group>


    <!-- Loading MoveIt interface -->
    <group if="$(arg use_moveit)">
        <include file="$(find panda_softhand_moveit_config)/launch/move_group.launch">
            <arg name="allow_trajectory_execution" value="true" />
            <arg name="info" value="true" />
            <arg name="debug" value="false" />
            <arg name="pipeline" value="$(arg pipeline)" />
        </include>
    </group>

    <!-- Loading Collision scene -->
    <include file="$(find panda_softhand_description)/launch/launchCollisionScene.launch" />

    <!-- RViz for visualization -->
    <node pkg="rviz" type="rviz" output="screen" name="rviz"
        args="-d $(find panda_softhand_description)/rviz/moveit.rviz" />

    <!-- Static calibration panda_link0 to camera link -->
    <!-- <include file="$(find panda_softhand_control)/launch/static_tf_calibration.launch" /> -->

    <!-- Static transform to generate a grasp pose from the object pose -->
    <!-- <include file="$(find
    panda_wrist_softhand_control)/launch/object_pose_to_grasp_pose.launch" /> -->
</launch>