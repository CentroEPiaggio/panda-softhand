<?xml version="1.0" ?>
<!-- THIS FILE LAUNCHES THE FRANKA EMIKA PANDA + SOFTHAND: BOTH THE PACKAGES ARE NEEDED -->
<launch>
    <!-- LAUNCH ARGUMENTS -->

    <!-- Robot to be used -->
  	<arg name="robot_name" default="panda_softhand"/>

    <!-- Panda params -->
    <arg name="panda_arm_enabled" default="true"/>
    <arg name="robot_ip1" default="172.16.0.2"/>
    <arg name="robot_ip2" default="172.16.0.3"/>
    <arg name="load_gripper" default="false"/>

    <!-- Hand/Glove params -->
    <arg name="right_hand_enabled" default="true"/>
    <arg name="launch_qb_interface" default="false"/>
    <arg name="use_imu" default="true"/>

    <!-- Utilities -->
    <arg name="environment_name" default="panda_grasp"/>
    <arg name="use_moveit" default="true"/>
    <arg name="use_safety" default="true"/>

    <!-- START LAUNCH -->

    <!-- Robot description -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find panda_softhand_description)/robot/panda_softhand_2robot.urdf.xacro'" unless="$(arg load_gripper)" />

    <!-- Joint state and robot state publishers of the full robot description -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
		<!-- FOR USING JOINT STATE PUBLISER FOR GETTING FINGER JOINT STATES -->
		<rosparam param="source_list">[/joint_states_desired]</rosparam>
        <rosparam param="source_list">[/panda_arm_1/franka_state_controller_1/joint_states, /panda_arm_2/franka_state_controller_2/joint_states]</rosparam>
		<!-- FOR USING FINGER FK PACKAGE FOR GETTING FINGER JOINT STATES -->
		<!-- <rosparam param="source_list">[/panda_arm/joint_states,/all_hand_joint_states]</rosparam> -->
        <param name="rate" value="30"/>
	</node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <!-- Panda namespace 1-->
    <group ns="panda_arm_1">

        <!-- A copy of robot description -->
        <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find panda_softhand_description)/robot/panda_softhand_2robot.urdf.xacro'" unless="$(arg load_gripper)" />

        <!-- Panda hardware interface -->
        <group if="$(arg panda_arm_enabled)">
            <node name="franka_control" pkg="franka_control" type="franka_control_node" output="screen" required="true">
                <rosparam command="load" file="$(find franka_control)/config/franka_control_node1.yaml" />
                <param name="robot_ip" value="$(arg robot_ip1)" />
            </node>
        </group>

        <!-- Panda controllers -->
        <rosparam command="load" file="$(find franka_control)/config/default_controllers1.yaml" />
        <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_state_controller_1"/>
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="position_joint_trajectory_controller_1"/>
        <node name="controller_stopper" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="--stopped cartesian_velocity_controller"/>
        
     <!-- Panda joint state publisher -->
        <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
            <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller_1/joint_states, franka_gripper/joint_states] </rosparam>
            <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller_1/joint_states] </rosparam>
            <param name="rate" value="30"/>
        </node>
        <!-- Panda desired state publisher -->
        <node name="joint_state_desired_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
            <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller_1/joint_states_desired, franka_gripper/joint_states] </rosparam>
            <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller_1/joint_states_desired, /right_hand/joint_states] </rosparam>
            <param name="rate" value="30"/>
            <remap from="/panda_arm_1/franka_state_controller_1/joint_states" to="/panda_arm_1/franka_state_controller_1/joint_states_desired" />
        </node>

    </group>

    <!-- Panda namespace 2-->
    <group ns="panda_arm_2">

        <!-- A copy of robot description -->
        <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find panda_softhand_description)/robot/panda_softhand_2robot.urdf.xacro'" unless="$(arg load_gripper)" />

        <!-- Panda hardware interface -->
        <group if="$(arg panda_arm_enabled)">
            <node name="franka_control" pkg="franka_control" type="franka_control_node" output="screen" required="true">
                <rosparam command="load" file="$(find franka_control)/config/franka_control_node2.yaml" />
                <param name="robot_ip" value="$(arg robot_ip2)" />
            </node>
        </group>

        <!-- Panda controllers -->
        <rosparam command="load" file="$(find franka_control)/config/default_controllers2.yaml" />
        <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_state_controller_2"/>
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="position_joint_trajectory_controller_2"/>
        <node name="controller_stopper" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="--stopped cartesian_velocity_controller"/>
        
     <!-- Panda joint state publisher -->
        <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
            <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller_2/joint_states, franka_gripper/joint_states] </rosparam>
            <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller_2/joint_states] </rosparam>
            <param name="rate" value="30"/>
        </node>
        <!-- Panda desired state publisher -->
        <node name="joint_state_desired_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
            <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller_1/joint_states_desired, franka_gripper/joint_states] </rosparam>
            <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller_1/joint_states_desired, /right_hand/joint_states] </rosparam>
            <param name="rate" value="30"/>
            <remap from="/panda_arm_2/franka_state_controller_2/joint_states" to="/panda_arm_2/franka_state_controller_2/joint_states_desired" />
        </node>

    </group>




    <!-- Loading MoveIt interface -->
	<group if="$(arg use_moveit)">
		<include file="$(find panda_dual_moveit_config)/launch/move_group.launch">
            <arg name="allow_trajectory_execution" value="true"/>
            <arg name="fake_execution" value="true"/>
            <arg name="info" value="true"/>
            <arg name="debug" value="false"/>
            <arg name="load_gripper" value="$(arg load_gripper)"/>
        </include>
	</group>

    <!-- Load collision objects into the planning scene -->
  	<node name="world_to_planning_scene" pkg="panda_softhand_control" type="world_to_planning_scene_node" args="$(find panda_softhand_description)/worlds/$(arg environment_name).world --skipIfco" output="screen"/>

    <rosparam command="load" file="$(find soft_hand_controllers)/config/controllers.yaml" />
  
    <!-- RViz for visualization -->
    <node pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find panda_softhand_control)/configs/config_2robot2.rviz"/>

</launch>