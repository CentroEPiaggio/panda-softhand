<?xml version="1.0" ?>
<launch>
    <!-- Utilities -->
    <arg name="load_gripper" default="true"/>
    <arg name="use_joint_state_publisher" default="true"/>

    <arg name="environment_name" default="panda_grasp"/>
    <arg name="use_moveit" default="true"/>
    <arg name="use_safety" default="true"/>

  <!-- The path to a robot description (xacro) file to control -->
  <arg name="robot" default="$(find panda_softhand_description)/robot/panda_softhand_2robot.urdf.xacro" />
  <!-- A copy of robot description -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find panda_softhand_description)/robot/panda_softhand_2robot.urdf.xacro'"/>

  <!-- Additional XACRO args. Be sure to escape colons and equal signs
       with backslashes, because XACRO use same syntax as roslaunch:
       roslaunch <pkg> <launchfile> robot:=path/to/urdf.xacro args:="foo\:\=bar other\:\=true"  -->
  <arg name="args" default="" />

  <!-- The name of the combined robot, used as control node name -->
  <arg name="robot_id" default="panda_softhand" />

  <!-- The config file containing all parameters for the combined hardware node like the IPs of the robots etc. -->
  <arg name="hw_config_file" default="$(find franka_control)/config/franka_combined_control_node.yaml"/>

  <!-- Optional arg to manually configure the ips of all robots, overwriting ips that are configured in hw_config_file -->
  <!-- The ips must be set as dictionary like  -->
  <arg name="robot_ips" value="{panda_arm_1/robot_ip: 172.16.0.2, panda_arm_2/robot_ip: 172.16.0.3}"/>

  <!-- The space separated list of controllers to start in this launch files. The controllers should be known from the controllers_file -->
  <arg name="controllers_to_start" default="controller_list/position_joint_trajectory_controller_1 controller_list/position_joint_trajctory_controller_2"/>

  <!-- The list of the joint_states topics of all combined robots to fuse to a complete topic -->
  <arg name="joint_states_source_list" default="[position_joint_trajectory_controller_1/joint_states, position_joint_trajctory_controller_2/joint_states, panda_arm_1/right_hand/joint_states, panda_arm_2/gripper/joint_states]"/>

  <node name="$(arg robot_id)" pkg="franka_control" type="franka_combined_control_node" output="screen" required="true" >
    <rosparam command="load" file="$(arg hw_config_file)" />
    <!-- Add or overwrite manually configured ips -->
    <rosparam subst_value="True">$(arg robot_ips)</rosparam>
    <param name="robot_description" command="xacro --inorder $(arg robot) $(arg args)" />
  </node>

  

  
  <!-- Group combined_panda -->
  <group ns="$(arg robot_id)">

    <rosparam command="load" file="$(find franka_control)/config/default_combined_controllers.yaml" />
    <rosparam command="load" file="$(find panda_softhand_moveit_config)/config/panda_controllers.yaml" />
      
    
    <node name="hw_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="$(arg controllers_to_start)" />



    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen"/>
    
    <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
      <param name="robot_description" command="xacro --inorder $(arg robot) $(arg args)" />
      <rosparam param="source_list"  subst_value="true">$(arg joint_states_source_list)</rosparam>
      <param name="rate" value="30"/>
    </node>
   
  </group>


  <!-- Loading MoveIt interface -->
	<group if="$(arg use_moveit)">
		<include file="$(find panda_softhand_moveit_config)/launch/move_group.launch">
            <arg name="allow_trajectory_execution" value="true"/>
            <arg name="fake_execution" value="true"/>
            <arg name="info" value="true"/>
            <arg name="debug" value="false"/>
            <arg name="load_gripper" value="$(arg load_gripper)"/>
        </include>
	</group>

  <!-- Load collision objects into the planning scene -->
  <node name="world_to_planning_scene" pkg="panda_softhand_control" type="world_to_planning_scene_node" args="$(find panda_softhand_description)/worlds/$(arg environment_name).world --skipIfco" output="screen"/>
  



  <!-- RViz for visualization -->
  <node pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find panda_softhand_control)/configs/config_2robot2.rviz"/>
</launch>
